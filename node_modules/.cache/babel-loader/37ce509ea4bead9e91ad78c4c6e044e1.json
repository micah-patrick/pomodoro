{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Micah\\\\Thinkful\\\\qualified-challenges\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport FocusDuration from \"./FocusDuration\";\nimport BreakDuration from \"./BreakDuration\";\nimport Session from \"./Session\";\nimport StartStop from \"./StartStop\";\n\nfunction Pomodoro() {\n  // .............\n  // initial state values\n  // .............\n  const initialStates = {\n    //-----Testing Initial Values-----\n    //-----Test Values-----\n    // focusDuration: 10,\n    // breakDuration: 8,\n    // remainingSeconds: 10,\n    //-----Real Values-----\n    focusDuration: 25 * 60,\n    breakDuration: 5 * 60,\n    remainingSeconds: 25 * 60,\n    //-----/Testing Initial Values-----\n    isTimerRunning: false,\n    isTimerStarted: false,\n    isSessionFocus: true\n  }; // .............\n  // State Declarations\n  // .............\n\n  const [state, setState] = useState({ ...initialStates\n  }); // .............\n  // functions and helper functions\n  // .............\n\n  useInterval(() => {\n    // To-Do: Implement what should happen when the timer is running\n    setState(current => ({ ...current,\n      remainingSeconds: current.remainingSeconds - 1\n    }));\n    state.remainingSeconds === 0 && switchSessions();\n  }, state.isTimerRunning ? 1000 : null);\n\n  function playPause() {\n    !state.isTimerStarted && setState(current => ({ ...current,\n      remainingSeconds: current.focusDuration\n    }));\n    setState(current => ({ ...current,\n      isTimerRunning: !current.isTimerRunning\n    }));\n    setState(current => ({ ...current,\n      isTimerStarted: true\n    }));\n  }\n\n  function switchSessions() {\n    new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n    setState(current => ({ ...current,\n      isSessionFocus: !current.isSessionFocus\n    }));\n    state.isSessionFocus ? setState(current => ({ ...current,\n      remainingSeconds: current.breakDuration\n    })) : setState(current => ({ ...current,\n      remainingSeconds: current.focusDuration\n    }));\n  } // .............\n  // Handler functions\n  // .............\n\n\n  const stopHandler = () => {\n    setState(current => ({ ...initialStates,\n      focusDuration: current.focusDuration,\n      breakDuration: current.breakDuration,\n      remainingSeconds: current.focusDuration\n    }));\n  };\n\n  const focusDecreaseHandler = () => {\n    const newDuration = Math.max(300, state.focusDuration - 300);\n    setState(current => ({ ...current,\n      focusDuration: newDuration\n    }));\n  };\n\n  const focusIncreaseHandler = () => {\n    const newDuration = Math.min(3600, state.focusDuration + 300);\n    setState(current => ({ ...current,\n      focusDuration: newDuration\n    }));\n  };\n\n  const breakDecreaseHandler = () => {\n    const newDuration = Math.max(60, state.breakDuration - 60);\n    setState(current => ({ ...current,\n      breakDuration: newDuration\n    }));\n  };\n\n  const breakIncreaseHandler = () => {\n    const newDuration = Math.min(900, state.breakDuration + 60);\n    setState(current => ({ ...current,\n      breakDuration: newDuration\n    }));\n  };\n\n  const durationHandler = {\n    focus: {\n      decrease: focusDecreaseHandler,\n      increase: focusIncreaseHandler\n    },\n    break: {\n      decrease: breakDecreaseHandler,\n      increase: breakIncreaseHandler\n    }\n  }; // const durationHandler = (event) => {\n  //   const target = event.target.type === \"button\" ? event.target : event.target.parentNode;\n  //   const adjuster = target.getAttribute(\"adjuster\"); \n  //   console.log(adjuster);\n  //   let newDuration = 0;\n  //   let focusOrBreak = \"\";\n  //   switch(adjuster) {\n  //     case \"decreaseFocus\":\n  //          newDuration = Math.max(300, state.focusDuration - 300);\n  //          focusOrBreak = \"focusDuration\";\n  //       break;\n  //     case \"increaseFocus\":\n  //          newDuration = Math.min(3600, state.focusDuration + 300);\n  //          focusOrBreak = \"focusDuration\";\n  //       break;\n  //     case \"decreaseBreak\":\n  //          newDuration = Math.max(60, state.breakDuration - 60);\n  //          focusOrBreak = \"breakDuration\";\n  //       break;\n  //     case \"increaseBreak\":\n  //          newDuration =  Math.min(900, state.breakDuration + 60);\n  //          focusOrBreak = \"breakDuration\";\n  //       }\n  //       console.log(newDuration);\n  //       setState((current) => ({\n  //         ...current,\n  //         [focusOrBreak]: newDuration,\n  //       }));\n  // }\n  // Only Render the session if the timer started\n\n  const displaySession = state.isTimerStarted && /*#__PURE__*/React.createElement(Session, {\n    state: state,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 5\n    }\n  }); // .............\n  // Render\n  // .............\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FocusDuration, {\n    state: state,\n    durationHandler: durationHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(BreakDuration, {\n    state: state,\n    durationHandler: durationHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(StartStop, {\n    state: state,\n    playPause: playPause,\n    stopHandler: stopHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }\n  }), displaySession);\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/Micah/Thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","useInterval","FocusDuration","BreakDuration","Session","StartStop","Pomodoro","initialStates","focusDuration","breakDuration","remainingSeconds","isTimerRunning","isTimerStarted","isSessionFocus","state","setState","current","switchSessions","playPause","Audio","play","stopHandler","focusDecreaseHandler","newDuration","Math","max","focusIncreaseHandler","min","breakDecreaseHandler","breakIncreaseHandler","durationHandler","focus","decrease","increase","break","displaySession"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport FocusDuration from \"./FocusDuration\";\nimport BreakDuration from \"./BreakDuration\";\nimport Session from \"./Session\";\nimport StartStop from \"./StartStop\";\n\n\nfunction Pomodoro() {\n// .............\n// initial state values\n// .............\n      const initialStates = {\n        //-----Testing Initial Values-----\n        //-----Test Values-----\n        // focusDuration: 10,\n        // breakDuration: 8,\n        // remainingSeconds: 10,\n        //-----Real Values-----\n        focusDuration: 25 * 60,\n        breakDuration: 5 * 60,\n        remainingSeconds: 25 * 60,\n        //-----/Testing Initial Values-----\n        isTimerRunning: false,\n        isTimerStarted: false,\n        isSessionFocus: true,\n      }\n\n// .............\n// State Declarations\n// .............\nconst [state, setState] = useState({...initialStates})\n\n\n// .............\n// functions and helper functions\n// .............\n\nuseInterval(\n  () => {\n    // To-Do: Implement what should happen when the timer is running\n    setState((current) => ({...current, remainingSeconds: current.remainingSeconds -1}));\n    state.remainingSeconds === 0 && switchSessions();\n  },\n  state.isTimerRunning ? 1000 : null\n  );\n  \n  function playPause() {\n    !state.isTimerStarted && setState((current) => ({...current, remainingSeconds: current.focusDuration}));\n    setState((current) => ({...current, isTimerRunning: !current.isTimerRunning}));\n    setState((current) => ({...current, isTimerStarted: true}));\n  \n  }\n  function switchSessions(){\n    new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n    setState((current) => ({...current, isSessionFocus: !current.isSessionFocus}));\n    state.isSessionFocus \n      ? setState((current) => ({...current, remainingSeconds: current.breakDuration})) \n      : setState((current) => ({...current, remainingSeconds: current.focusDuration})); \n    \n  }\n\n\n\n\n// .............\n// Handler functions\n// .............\n\n  const stopHandler = () => {\n    setState((current) => ({\n      ...initialStates,\n      focusDuration: current.focusDuration,\n      breakDuration: current.breakDuration,\n      remainingSeconds: current.focusDuration,\n    }));\n  }\n\n  const focusDecreaseHandler = () => {\n      const newDuration = Math.max(300, state.focusDuration - 300); \n      setState((current) => ({\n        ...current,\n        focusDuration: newDuration,\n      }));\n  }\n  const focusIncreaseHandler = () => {\n      const newDuration = Math.min(3600, state.focusDuration + 300); \n      setState((current) => ({\n        ...current,\n        focusDuration: newDuration,\n      }));\n  }\n  const breakDecreaseHandler = () => {\n      const newDuration = Math.max(60, state.breakDuration - 60)\n      setState((current) => ({\n        ...current,\n        breakDuration: newDuration,\n      }));\n  }\n  const breakIncreaseHandler = () => {\n      const newDuration =  Math.min(900, state.breakDuration + 60); \n      setState((current) => ({\n        ...current,\n        breakDuration: newDuration,\n      }));\n  }\n\n  const durationHandler = {\n    focus: {decrease: focusDecreaseHandler, increase: focusIncreaseHandler},\n    break: {decrease: breakDecreaseHandler, increase: breakIncreaseHandler}\n  }\n  \n  \n  // const durationHandler = (event) => {\n  //   const target = event.target.type === \"button\" ? event.target : event.target.parentNode;\n  //   const adjuster = target.getAttribute(\"adjuster\"); \n  //   console.log(adjuster);\n  //   let newDuration = 0;\n  //   let focusOrBreak = \"\";\n  //   switch(adjuster) {\n  //     case \"decreaseFocus\":\n  //          newDuration = Math.max(300, state.focusDuration - 300);\n  //          focusOrBreak = \"focusDuration\";\n  //       break;\n  //     case \"increaseFocus\":\n  //          newDuration = Math.min(3600, state.focusDuration + 300);\n  //          focusOrBreak = \"focusDuration\";\n  //       break;\n  //     case \"decreaseBreak\":\n  //          newDuration = Math.max(60, state.breakDuration - 60);\n  //          focusOrBreak = \"breakDuration\";\n  //       break;\n  //     case \"increaseBreak\":\n  //          newDuration =  Math.min(900, state.breakDuration + 60);\n  //          focusOrBreak = \"breakDuration\";\n  //       }\n  //       console.log(newDuration);\n  //       setState((current) => ({\n  //         ...current,\n  //         [focusOrBreak]: newDuration,\n  //       }));\n  // }\n\n  \n// Only Render the session if the timer started\n  const displaySession= state.isTimerStarted && (\n    <Session \n          state={state} \n        />\n  );\n\n\n// .............\n// Render\n// .............\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <FocusDuration \n          state={state} \n          durationHandler={durationHandler} \n        />\n        <BreakDuration \n          state={state} \n          durationHandler={durationHandler} \n        />\n      </div>\n      <StartStop \n        state={state}\n        playPause={playPause}\n        stopHandler={stopHandler}\n      />\n      {displaySession}\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}