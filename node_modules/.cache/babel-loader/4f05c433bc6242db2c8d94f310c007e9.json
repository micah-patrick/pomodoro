{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Micah\\\\Thinkful\\\\qualified-challenges\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport FocusDuration from \"./FocusDuration\";\nimport BreakDuration from \"./BreakDuration\";\nimport Session from \"./Session\";\nimport StartStop from \"./StartStop\";\n\nfunction Pomodoro() {\n  // .............\n  // initial state values\n  // .............\n  const initialStates = {\n    focusDuration: 25 * 60,\n    breakDuration: 5 * 60,\n    // focusDuration: 3,\n    // breakDuration: 5,\n    isTimerRunning: false,\n    isTimerStarted: false,\n    isSessionFocus: true,\n    remainingSeconds: 25 * 60\n  }; // initialDurationStates\n  // setIsTimerRunning(false);\n  // setIsSessionFocus(true);\n  // setRemainingSeconds(durations.focusDuration);\n  // setIsTimerStarted(() => false);\n  // .............\n  // State Declarations\n  // .............\n\n  const [state, setState] = useState({ ...initialStates\n  }); // .............\n  // functions and helper functions\n  // .............\n\n  useInterval(() => {\n    // To-Do: Implement what should happen when the timer is running\n    setState(current => ({ ...current,\n      remainingSeconds: current.remainingSeconds - 1\n    }));\n    state.remainingSeconds === 0 && switchSessions();\n  }, state.isTimerRunning ? 1000 : null);\n\n  function playPause() {\n    setState(current => ({ ...current,\n      isTimerRunning: !current.isTimerRunning\n    }));\n    setState(current => ({ ...current,\n      isTimerStarted: true\n    }));\n  }\n\n  function switchSessions() {\n    new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n    setIsSessionFocus(previousState => !previousState);\n    isSessionFocus ? setRemainingSeconds(durations.breakDuration) : setRemainingSeconds(durations.focusDuration);\n  }\n\n  function updateRemainingFromDuration(duration) {\n    setRemainingSeconds(duration);\n  }\n\n  const displaySession = isTimerStarted && /*#__PURE__*/React.createElement(Session, {\n    durations: durations,\n    isSessionFocus: isSessionFocus,\n    remainingSeconds: remainingSeconds,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }); // .............\n  // Handler functions\n  // .............\n\n  const stopHandler = () => {\n    setIsTimerRunning(false);\n    setIsSessionFocus(true);\n    setRemainingSeconds(durations.focusDuration);\n    setIsTimerStarted(() => false);\n  };\n\n  const focusDecreaseHandler = () => {\n    const newDuration = Math.max(300, durations.focusDuration - 300);\n    setDurations({ ...durations,\n      focusDuration: newDuration\n    });\n    isSessionFocus && updateRemainingFromDuration(newDuration);\n  };\n\n  const focusIncreaseHandler = () => {\n    const newDuration = Math.min(3600, durations.focusDuration + 300);\n    setDurations({ ...durations,\n      focusDuration: newDuration\n    });\n    isSessionFocus && updateRemainingFromDuration(newDuration);\n  };\n\n  const breakDecreaseHandler = () => {\n    const newDuration = Math.max(60, durations.breakDuration - 60);\n    setDurations({ ...durations,\n      breakDuration: newDuration\n    });\n    !isSessionFocus && updateRemainingFromDuration(newDuration);\n  };\n\n  const breakIncreaseHandler = () => {\n    const newDuration = Math.min(900, durations.breakDuration + 60);\n    setDurations({ ...durations,\n      breakDuration: newDuration\n    });\n    !isSessionFocus && updateRemainingFromDuration(newDuration);\n  };\n\n  const durationHandler = {\n    focus: {\n      decrease: focusDecreaseHandler,\n      increase: focusIncreaseHandler\n    },\n    break: {\n      decrease: breakDecreaseHandler,\n      increase: breakIncreaseHandler\n    }\n  }; // .............\n  // Render\n  // .............\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FocusDuration, {\n    durations: durations,\n    durationHandler: durationHandler,\n    isTimerStarted: isTimerStarted,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(BreakDuration, {\n    durations: durations,\n    durationHandler: durationHandler,\n    isTimerStarted: isTimerStarted,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(StartStop, {\n    playPause: playPause,\n    isTimerRunning: isTimerRunning,\n    isTimerStarted: isTimerStarted,\n    stopHandler: stopHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }\n  }), displaySession);\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/Micah/Thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","useInterval","FocusDuration","BreakDuration","Session","StartStop","Pomodoro","initialStates","focusDuration","breakDuration","isTimerRunning","isTimerStarted","isSessionFocus","remainingSeconds","state","setState","current","switchSessions","playPause","Audio","play","setIsSessionFocus","previousState","setRemainingSeconds","durations","updateRemainingFromDuration","duration","displaySession","stopHandler","setIsTimerRunning","setIsTimerStarted","focusDecreaseHandler","newDuration","Math","max","setDurations","focusIncreaseHandler","min","breakDecreaseHandler","breakIncreaseHandler","durationHandler","focus","decrease","increase","break"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport FocusDuration from \"./FocusDuration\";\nimport BreakDuration from \"./BreakDuration\";\nimport Session from \"./Session\";\nimport StartStop from \"./StartStop\";\n\nfunction Pomodoro() {\n// .............\n// initial state values\n// .............\n      const initialStates = {\n        focusDuration: 25 * 60,\n        breakDuration: 5 * 60,\n        // focusDuration: 3,\n        // breakDuration: 5,\n        isTimerRunning: false,\n        isTimerStarted: false,\n        isSessionFocus: true,\n        remainingSeconds: 25 * 60,\n      }\n\n\n      // initialDurationStates\n      // setIsTimerRunning(false);\n      // setIsSessionFocus(true);\n      // setRemainingSeconds(durations.focusDuration);\n      // setIsTimerStarted(() => false);\n\n\n\n// .............\n// State Declarations\n// .............\nconst [state, setState] = useState({...initialStates})\n\n\n// .............\n// functions and helper functions\n// .............\n\nuseInterval(\n  () => {\n    // To-Do: Implement what should happen when the timer is running\n    setState((current) => ({...current, remainingSeconds: current.remainingSeconds -1}));\n    state.remainingSeconds === 0 && switchSessions();\n  },\n  state.isTimerRunning ? 1000 : null\n  );\n  \n  function playPause() {\n    setState((current) => ({...current, isTimerRunning: !current.isTimerRunning}));\n    setState((current) => ({...current, isTimerStarted: true}));\n  \n  }\n  function switchSessions(){\n    new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n    setIsSessionFocus((previousState) => !previousState);\n    isSessionFocus ? setRemainingSeconds(durations.breakDuration) : setRemainingSeconds(durations.focusDuration);\n  }\n  \n  function updateRemainingFromDuration(duration){\n    setRemainingSeconds(duration)\n  }\n\n  const displaySession= isTimerStarted && (\n    <Session \n          durations={durations} \n          isSessionFocus={isSessionFocus} \n          remainingSeconds={remainingSeconds}\n        />\n  );\n\n\n// .............\n// Handler functions\n// .............\n\n  const stopHandler = () => {\n    setIsTimerRunning(false);\n    setIsSessionFocus(true);\n    setRemainingSeconds(durations.focusDuration);\n    setIsTimerStarted(() => false);\n  }\n\n  const focusDecreaseHandler = () => {\n      const newDuration = Math.max(300, durations.focusDuration - 300); \n      setDurations({\n        ...durations,\n        focusDuration: newDuration,\n      });\n      isSessionFocus && updateRemainingFromDuration(newDuration);\n  }\n  const focusIncreaseHandler = () => {\n      const newDuration = Math.min(3600, durations.focusDuration + 300); \n      setDurations({\n        ...durations,\n        focusDuration: newDuration,\n      });\n      isSessionFocus && updateRemainingFromDuration(newDuration);\n  }\n  const breakDecreaseHandler = () => {\n      const newDuration = Math.max(60, durations.breakDuration - 60)\n      setDurations({\n        ...durations,\n        breakDuration: newDuration, \n      });\n      !isSessionFocus && updateRemainingFromDuration(newDuration);\n  }\n  const breakIncreaseHandler = () => {\n      const newDuration =  Math.min(900, durations.breakDuration + 60); \n      setDurations({\n        ...durations,\n        breakDuration: newDuration,\n      });\n      !isSessionFocus && updateRemainingFromDuration(newDuration);\n  }\n\n  const durationHandler = {\n    focus: {decrease: focusDecreaseHandler, increase: focusIncreaseHandler},\n    break: {decrease: breakDecreaseHandler, increase: breakIncreaseHandler}\n  }\n\n\n// .............\n// Render\n// .............\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <FocusDuration \n          durations={durations} \n          durationHandler={durationHandler} \n          isTimerStarted={isTimerStarted}\n        />\n        <BreakDuration \n          durations={durations} \n          durationHandler={durationHandler} \n          isTimerStarted={isTimerStarted}\n        />\n      </div>\n      <StartStop \n        playPause={playPause}\n        isTimerRunning={isTimerRunning}\n        isTimerStarted={isTimerStarted}\n        stopHandler={stopHandler}\n      />\n      {displaySession}\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}