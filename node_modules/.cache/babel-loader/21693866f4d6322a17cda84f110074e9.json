{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Micah\\\\Thinkful\\\\qualified-challenges\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\ProgressBar.js\";\nimport React from \"react\";\n\nfunction ProgressBar({\n  state\n}) {\n  const percentComplete = isSessionFocus ? (1 - remainingSeconds / durations.focusDuration) * 100 : (1 - remainingSeconds / durations.breakDuration) * 100;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": percentComplete // TO-DO: Increase aria-valuenow as elapsed time increases\n    ,\n    style: {\n      width: percentComplete + \"%\"\n    } // TO-DO: Increase width % as elapsed time increases\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 15\n    }\n  }))));\n}\n\n;\nexport default ProgressBar;","map":{"version":3,"sources":["C:/Users/Micah/Thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/ProgressBar.js"],"names":["React","ProgressBar","state","percentComplete","isSessionFocus","remainingSeconds","durations","focusDuration","breakDuration","height","width"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,WAAT,CAAqB;AAACC,EAAAA;AAAD,CAArB,EAA8B;AAE9B,QAAMC,eAAe,GAAGC,cAAc,GAClC,CAAC,IAAKC,gBAAgB,GAAGC,SAAS,CAACC,aAAnC,IAAqD,GADnB,GAElC,CAAC,IAAKF,gBAAgB,GAAGC,SAAS,CAACE,aAAnC,IAAqD,GAFzD;AAII,sBACI;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAA0B,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,EAAC,cADZ;AAEE,IAAA,IAAI,EAAC,aAFP;AAGE,qBAAc,GAHhB;AAIE,qBAAc,KAJhB;AAKE,qBAAeN,eALjB,CAKkC;AALlC;AAME,IAAA,KAAK,EAAE;AAAEO,MAAAA,KAAK,EAAEP,eAAe,GAAG;AAA3B,KANT,CAM2C;AAN3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,CADJ;AAiBH;;AAAA;AAED,eAAeF,WAAf","sourcesContent":["import React from \"react\";\r\n\r\nfunction ProgressBar({state}) {\r\n\r\nconst percentComplete = isSessionFocus \r\n  ? (1 - (remainingSeconds / durations.focusDuration)) * 100\r\n  : (1 - (remainingSeconds / durations.breakDuration)) * 100;\r\n\r\n    return (\r\n        <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n            <div className=\"progress\" style={{ height: \"20px\" }}>\r\n              <div\r\n                className=\"progress-bar\"\r\n                role=\"progressbar\"\r\n                aria-valuemin=\"0\"\r\n                aria-valuemax=\"100\"\r\n                aria-valuenow={percentComplete} // TO-DO: Increase aria-valuenow as elapsed time increases\r\n                style={{ width: percentComplete + \"%\" }} // TO-DO: Increase width % as elapsed time increases\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default ProgressBar;"]},"metadata":{},"sourceType":"module"}