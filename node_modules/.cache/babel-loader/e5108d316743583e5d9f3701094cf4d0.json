{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Micah\\\\Thinkful\\\\qualified-challenges\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport { secondsToDuration } from \"../utils/duration\";\nimport FocusDuration from \"./FocusDuration\";\nimport BreakDuration from \"./BreakDuration\";\nimport ProgressBar from \"./ProgressBar\";\n\nfunction Pomodoro() {\n  // .............\n  // initial state values\n  // .............\n  const initialDurationStates = {\n    // focusDuration: 25 * 60,\n    // breakDuration: 5 * 60,\n    focusDuration: 3,\n    breakDuration: 5\n  };\n  const initialIsSessionFocus = true;\n  const initialIsTimerRunning = false;\n  const initialIsTimerStarted = false; // .............\n  // State Declarations\n  // .............\n\n  const [durations, setDurations] = useState({ ...initialDurationStates\n  });\n  const [isSessionFocus, setIsSessionFocus] = useState(initialIsSessionFocus);\n  const [remainingSeconds, setRemainingSeconds] = useState(initialDurationStates.focusDuration);\n  const [isTimerRunning, setIsTimerRunning] = useState(initialIsTimerRunning);\n  const [isTimerStarted, setIsTimerStarted] = useState(initialIsTimerStarted); // .............\n  // functions and helper functions\n  // .............\n\n  useInterval(() => {\n    // To-Do: Implement what should happen when the timer is running\n    setRemainingSeconds(current => current - 1);\n    remainingSeconds === 0 && switchSessions();\n  }, isTimerRunning ? 1000 : null);\n\n  function playPause() {\n    setIsTimerRunning(prevState => !prevState);\n    setIsTimerStarted(() => true);\n  }\n\n  function switchSessions() {\n    new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n    setIsSessionFocus(previousState => !previousState);\n    isSessionFocus ? setRemainingSeconds(durations.breakDuration) : setRemainingSeconds(durations.focusDuration);\n  }\n\n  function sessionTitle() {\n    if (isSessionFocus) {\n      return \"Focusing for \" + secondsToDuration(durations.focusDuration) + \" minutes\";\n    } else {\n      return \"On Break for \" + secondsToDuration(durations.breakDuration) + \" minutes\";\n    }\n  }\n\n  function updateRemainingFromDuration(duration) {\n    setRemainingSeconds(duration);\n  } // .............\n  // Handler functions\n  // .............\n\n\n  const stopHandler = () => {\n    setIsTimerRunning(false);\n    setIsSessionFocus(true);\n    setRemainingSeconds(durations.focusDuration);\n    setIsTimerStarted(() => false);\n  };\n\n  const focusDecreaseHandler = () => {\n    const newDuration = Math.max(300, durations.focusDuration - 300);\n    setDurations({ ...durations,\n      focusDuration: newDuration\n    });\n    isSessionFocus && updateRemainingFromDuration(newDuration);\n  };\n\n  const focusIncreaseHandler = () => {\n    const newDuration = Math.min(3600, durations.focusDuration + 300);\n    setDurations({ ...durations,\n      focusDuration: newDuration\n    });\n    isSessionFocus && updateRemainingFromDuration(newDuration);\n  };\n\n  const breakDecreaseHandler = () => {\n    const newDuration = Math.max(60, durations.breakDuration - 60);\n    setDurations({ ...durations,\n      breakDuration: newDuration\n    });\n    !isSessionFocus && updateRemainingFromDuration(newDuration);\n  };\n\n  const breakIncreaseHandler = () => {\n    const newDuration = Math.min(900, durations.breakDuration + 60);\n    setDurations({ ...durations,\n      breakDuration: newDuration\n    });\n    !isSessionFocus && updateRemainingFromDuration(newDuration);\n  };\n\n  const durationHandler = {\n    focus: {\n      decrease: focusDecreaseHandler,\n      increase: focusIncreaseHandler\n    },\n    break: {\n      decrease: breakDecreaseHandler,\n      increase: breakIncreaseHandler\n    }\n  }; // .............\n  // Render\n  // .............\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FocusDuration, {\n    durations: durations,\n    durationHandler: durationHandler,\n    isTimerStarted: isTimerStarted,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(BreakDuration, {\n    durations: durations,\n    durationHandler: durationHandler,\n    isTimerStarted: isTimerStarted,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"btn-group btn-group-lg mb-2\",\n    role: \"group\",\n    \"aria-label\": \"Timer controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-primary\",\n    \"data-testid\": \"play-pause\",\n    title: \"Start or pause timer\",\n    onClick: playPause,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: classNames({\n      oi: true,\n      \"oi-media-play\": !isTimerRunning,\n      \"oi-media-pause\": isTimerRunning\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    disabled: !isTimerStarted,\n    type: \"button\",\n    className: \"btn btn-secondary\",\n    title: \"Stop the session\",\n    onClick: stopHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"oi oi-media-stop\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 15\n    }\n  }))))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    hidden: !isTimerStarted,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"session-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }\n  }, sessionTitle()), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }\n  }, secondsToDuration(remainingSeconds), \" remaining\"))), /*#__PURE__*/React.createElement(ProgressBar, {\n    durations: durations,\n    isSessionFocus: isSessionFocus,\n    remainingSeconds: remainingSeconds,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/Micah/Thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","classNames","useInterval","secondsToDuration","FocusDuration","BreakDuration","ProgressBar","Pomodoro","initialDurationStates","focusDuration","breakDuration","initialIsSessionFocus","initialIsTimerRunning","initialIsTimerStarted","durations","setDurations","isSessionFocus","setIsSessionFocus","remainingSeconds","setRemainingSeconds","isTimerRunning","setIsTimerRunning","isTimerStarted","setIsTimerStarted","current","switchSessions","playPause","prevState","Audio","play","previousState","sessionTitle","updateRemainingFromDuration","duration","stopHandler","focusDecreaseHandler","newDuration","Math","max","focusIncreaseHandler","min","breakDecreaseHandler","breakIncreaseHandler","durationHandler","focus","decrease","increase","break","oi"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport { secondsToDuration } from \"../utils/duration\";\nimport FocusDuration from \"./FocusDuration\";\nimport BreakDuration from \"./BreakDuration\";\nimport ProgressBar from \"./ProgressBar\";\n\nfunction Pomodoro() {\n// .............\n// initial state values\n// .............\n      const initialDurationStates = {\n        // focusDuration: 25 * 60,\n        // breakDuration: 5 * 60,\n        focusDuration: 3,\n        breakDuration: 5,\n      }\n      const initialIsSessionFocus = true;\n      const initialIsTimerRunning = false;\n      const initialIsTimerStarted = false;\n      \n// .............\n// State Declarations\n// .............\nconst [durations, setDurations] = useState({...initialDurationStates})\nconst [isSessionFocus, setIsSessionFocus] = useState(initialIsSessionFocus);\nconst [remainingSeconds, setRemainingSeconds] = useState(initialDurationStates.focusDuration);\nconst [isTimerRunning, setIsTimerRunning] = useState(initialIsTimerRunning);\nconst [isTimerStarted, setIsTimerStarted] = useState(initialIsTimerStarted);\n\n// .............\n// functions and helper functions\n// .............\n\nuseInterval(\n  () => {\n    // To-Do: Implement what should happen when the timer is running\n    setRemainingSeconds((current) => current - 1);\n    remainingSeconds === 0 && switchSessions();\n  },\n  isTimerRunning ? 1000 : null\n  );\n  \n  function playPause() {\n    setIsTimerRunning((prevState) => !prevState);\n    setIsTimerStarted(() => true);\n  }\n  function switchSessions(){\n    new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n    setIsSessionFocus((previousState) => !previousState);\n    isSessionFocus ? setRemainingSeconds(durations.breakDuration) : setRemainingSeconds(durations.focusDuration);\n  }\n\n  function sessionTitle() {\n    if(isSessionFocus) {\n      return \"Focusing for \" + secondsToDuration(durations.focusDuration) + \" minutes\";\n    } else {\n      return \"On Break for \" + secondsToDuration(durations.breakDuration) + \" minutes\";\n    }\n  }\n  \n  function updateRemainingFromDuration(duration){\n    setRemainingSeconds(duration)\n  }\n\n\n// .............\n// Handler functions\n// .............\n\n  const stopHandler = () => {\n    setIsTimerRunning(false);\n    setIsSessionFocus(true);\n    setRemainingSeconds(durations.focusDuration);\n    setIsTimerStarted(() => false);\n  }\n\n  const focusDecreaseHandler = () => {\n      const newDuration = Math.max(300, durations.focusDuration - 300); \n      setDurations({\n        ...durations,\n        focusDuration: newDuration,\n      });\n      isSessionFocus && updateRemainingFromDuration(newDuration);\n  }\n  const focusIncreaseHandler = () => {\n      const newDuration = Math.min(3600, durations.focusDuration + 300); \n      setDurations({\n        ...durations,\n        focusDuration: newDuration,\n      });\n      isSessionFocus && updateRemainingFromDuration(newDuration);\n  }\n  const breakDecreaseHandler = () => {\n      const newDuration = Math.max(60, durations.breakDuration - 60)\n      setDurations({\n        ...durations,\n        breakDuration: newDuration, \n      });\n      !isSessionFocus && updateRemainingFromDuration(newDuration);\n  }\n  const breakIncreaseHandler = () => {\n      const newDuration =  Math.min(900, durations.breakDuration + 60); \n      setDurations({\n        ...durations,\n        breakDuration: newDuration,\n      });\n      !isSessionFocus && updateRemainingFromDuration(newDuration);\n  }\n\n  const durationHandler = {\n    focus: {decrease: focusDecreaseHandler, increase: focusIncreaseHandler},\n    break: {decrease: breakDecreaseHandler, increase: breakIncreaseHandler}\n  }\n\n\n// .............\n// Render\n// .............\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <FocusDuration \n          durations={durations} \n          durationHandler={durationHandler} \n          isTimerStarted={isTimerStarted}\n        />\n        <BreakDuration \n          durations={durations} \n          durationHandler={durationHandler} \n          isTimerStarted={isTimerStarted}\n        />\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <div\n            className=\"btn-group btn-group-lg mb-2\"\n            role=\"group\"\n            aria-label=\"Timer controls\"\n          >\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              data-testid=\"play-pause\"\n              title=\"Start or pause timer\"\n              onClick={playPause}\n            >\n              <span\n                className={classNames({\n                  oi: true,\n                  \"oi-media-play\": !isTimerRunning,\n                  \"oi-media-pause\": isTimerRunning,\n                })}\n              />\n            </button>\n            {/* TO-DO: Implement stopping the current focus or break session and disable when there is no active session */}\n            <button\n              disabled={!isTimerStarted}\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              title=\"Stop the session\"\n              onClick={stopHandler}\n            >\n              <span className=\"oi oi-media-stop\" />\n            </button>\n          </div>\n        </div>\n      </div>\n      <div>\n        {/* TODO: This area should show only when a focus or break session is running or pauses */}\n        <div className=\"row mb-2\" hidden={!isTimerStarted}>\n          <div className=\"col\">\n            {/* TO-DO: Update message below to include current session (Focusing or On Break) and total duration */}\n            <h2 data-testid=\"session-title\">{sessionTitle()}</h2>\n            {/* TO-DO: Update message below to include time remaining in the current session */}\n            <p className=\"lead\" data-testid=\"session-sub-title\">\n              {secondsToDuration(remainingSeconds)} remaining\n            </p>\n          </div>\n        </div>\n        <ProgressBar \n          durations={durations} \n          isSessionFocus={isSessionFocus} \n          remainingSeconds={remainingSeconds} />\n      </div>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}