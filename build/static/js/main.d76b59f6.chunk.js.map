{"version":3,"sources":["utils/duration/index.js","pomodoro/FocusDuration.js","pomodoro/BreakDuration.js","pomodoro/ProgressBar.js","pomodoro/Session.js","pomodoro/StartStop.js","utils/class-names/index.js","pomodoro/Pomodoro.js","utils/useInterval/index.js","App.js","index.js"],"names":["secondsToDuration","givenSeconds","minutes","Math","floor","toString","padStart","seconds","round","Durations","state","durationHandler","className","data-testid","focusDuration","disabled","isTimerStarted","type","onClick","BreakDuration","breakDuration","ProgressBar","percentComplete","isSessionFocus","remainingSeconds","style","height","role","aria-valuemin","aria-valuemax","aria-valuenow","width","Session","StartStop","classNameToBoolean","playPause","stopHandler","aria-label","title","oi","isTimerRunning","Object","entries","reduce","classes","value","concat","undefined","filter","join","Pomodoro","initialStates","useState","setState","focusAlarm","Audio","breakAlarm","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","play","event","targetId","target","parentNode","dataset","testid","targetType","split","newDuration","max","min","displaySession","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d76b59f6.chunk.js","sourcesContent":["/**\n * Formats a number of minutes as 'mm:00'.\n *\n * For example,\n *    minutesToDuration(3) = '03:00'\n *    minutesToDuration(45) = '45:00'\n *\n * @param givenMinutes\n *    the number of minutes in the duration\n * @returns {string}\n *    the given minutes formatted as 'mm:00'\n */\n\nexport function minutesToDuration(givenMinutes) {\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n  return `${minutes}:00`;\n}\n\n/**\n * Formats a number of seconds as 'mm:ss'.\n *\n * For example,\n *    secondsToDuration(305) = '05:05'\n *    secondsToDuration(930) = '15:30'\n *\n * @param givenSeconds\n *    the number of seconds in the duration\n * @returns {string}\n *    the given seconds formatted as 'mm:ss'\n */\n\nexport function secondsToDuration(givenSeconds) {\n  const minutes = Math.floor((givenSeconds % 3660) / 60)\n    .toString()\n    .padStart(2, \"0\");\n  const seconds = Math.round(givenSeconds % 60)\n    .toString()\n    .padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}\n","import React from \"react\";\r\nimport { secondsToDuration } from \"../utils/duration\";\r\n\r\n//focus duration label and buttons\r\nexport default function Durations({ state, durationHandler }) {\r\n  return (\r\n    <div className=\"col\">\r\n      <div className=\"input-group input-group-lg mb-2\">\r\n        <span className=\"input-group-text\" data-testid=\"duration-focus\">\r\n          Focus Duration: {secondsToDuration(state.focusDuration)} {/* lists current focus duration setting */}\r\n        </span>\r\n        <div className=\"input-group-append\">\r\n          <button /* decrease focus button */\r\n            disabled={state.isTimerStarted}\r\n            type=\"button\"\r\n            className=\"btn btn-secondary\"\r\n            data-testid=\"decrease-focus\"\r\n            onClick={durationHandler}\r\n          >\r\n            <span className=\"oi oi-minus\" />\r\n          </button>\r\n          <button /* increase focus button */\r\n            disabled={state.isTimerStarted}\r\n            type=\"button\"\r\n            className=\"btn btn-secondary\"\r\n            data-testid=\"increase-focus\"\r\n            onClick={durationHandler}\r\n          >\r\n            <span className=\"oi oi-plus\" />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { secondsToDuration } from \"../utils/duration\";\r\n\r\n//break duration label and buttons\r\nexport default function BreakDuration({ state, durationHandler }) {\r\n  return (\r\n    <div className=\"col\">\r\n      <div className=\"float-right\">\r\n        <div className=\"input-group input-group-lg mb-2\">\r\n          <span className=\"input-group-text\" data-testid=\"duration-break\">\r\n            Break Duration: {secondsToDuration(state.breakDuration)} {/* lists current break duration setting */}\r\n          </span>\r\n          <div className=\"input-group-append\">\r\n            <button /* decrease break button */\r\n              disabled={state.isTimerStarted}\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              data-testid=\"decrease-break\"\r\n              onClick={durationHandler}\r\n            >\r\n              <span className=\"oi oi-minus\" />\r\n            </button>\r\n            <button /* increase break button */\r\n              disabled={state.isTimerStarted}\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              data-testid=\"increase-break\"\r\n              onClick={durationHandler}\r\n            >\r\n              <span className=\"oi oi-plus\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\n//progress bar component\r\nexport default function ProgressBar({ state }) {\r\n  const percentComplete = state.isSessionFocus //percentage of the session thats complete, expressed as a number 0-100\r\n    ? (1 - state.remainingSeconds / state.focusDuration) * 100 //denominator based on current session\r\n    : (1 - state.remainingSeconds / state.breakDuration) * 100;\r\n\r\n  return (\r\n    <div className=\"row mb-2\">\r\n      <div className=\"col\">\r\n        <div className=\"progress\" style={{ height: \"20px\" }}>\r\n          <div\r\n            className=\"progress-bar\"\r\n            role=\"progressbar\"\r\n            aria-valuemin=\"0\"\r\n            aria-valuemax=\"100\"\r\n            aria-valuenow={percentComplete} \r\n            style={{ width: percentComplete + \"%\" }}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { secondsToDuration } from \"../utils/duration\";\r\nimport ProgressBar from \"./ProgressBar\";\r\n\r\n\r\nexport default function Session({ state }) {\r\n  \r\n  function sessionTitle({ isSessionFocus }) { //determines what the session title should be\r\n    if (isSessionFocus) { // if in focus session (isSessionFocus === true)...\r\n      return (\r\n        \"Focusing for \" + secondsToDuration(state.focusDuration) + \" minutes\" //...use for focus sessions\r\n      );\r\n    } else {\r\n      return (\r\n        \"On Break for \" + secondsToDuration(state.breakDuration) + \" minutes\" //...use for break sessions\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"row mb-2\">\r\n        <div className=\"col\">\r\n          <h2 data-testid=\"session-title\">{sessionTitle(state)}</h2> {/* use title defined by sessionTitle function */}\r\n          <p className=\"lead\" data-testid=\"session-sub-title\">\r\n            {secondsToDuration(state.remainingSeconds)} remaining {/* time remaining */}\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <ProgressBar state={state} />\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport classNames from \"../utils/class-names\";\r\n\r\n//play/pause button and stop button\r\nexport default function StartStop({ state, playPause, stopHandler }) {\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col\">\r\n        <div\r\n          className=\"btn-group btn-group-lg mb-2\"\r\n          role=\"group\"\r\n          aria-label=\"Timer controls\"\r\n        >\r\n          <button //start / pause button\r\n            type=\"button\"\r\n            className=\"btn btn-primary\"\r\n            data-testid=\"play-pause\"\r\n            title=\"Start or pause timer\"\r\n            onClick={playPause}\r\n          >\r\n            <span\r\n              className={classNames({\r\n                oi: true,\r\n                \"oi-media-play\": !state.isTimerRunning, //uses play icon when timer is not running\r\n                \"oi-media-pause\": state.isTimerRunning, //uses puase icon whrn timer is running\r\n              })}\r\n            />\r\n          </button>\r\n          <button //stop button\r\n            disabled={!state.isTimerStarted} // stop button is disabled when timer is not started.\r\n            type=\"button\"\r\n            className=\"btn btn-secondary\"\r\n            title=\"Stop the session\"\r\n            onClick={stopHandler}\r\n          >\r\n            <span className=\"oi oi-media-stop\" />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n","import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport FocusDuration from \"./FocusDuration\";\nimport BreakDuration from \"./BreakDuration\";\nimport Session from \"./Session\";\nimport StartStop from \"./StartStop\";\n\nfunction Pomodoro() {\n  // .............\n  // initial state values\n  // .............\n  const initialStates = {\n    //-----Testing Initial Values-----\n    //-----Test Values-----\n    // focusDuration: 5,\n    // breakDuration: 8,\n    // remainingSeconds: 5,\n    //-----Real Values-----\n    focusDuration: 25 * 60,\n    breakDuration: 5 * 60,\n    remainingSeconds: 25 * 60,\n    //-----/Testing Initial Values-----\n    isSessionFocus: true,\n    isTimerRunning: false,\n    isTimerStarted: false,\n  }; \n\n  // .............\n  // State Declarations\n  // .............\n  const [state, setState] = useState({ ...initialStates });\n  const focusAlarm = new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1484.mp3`);\n  const breakAlarm = new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1673.mp3`);\n\n  // .............\n  // functions and helper functions\n  // .............\n\n  useInterval( //what heppens each second while the timer is running\n    () => {\n      setState((current) => ({//subtract one second from the remaining seconds\n        ...current,\n        remainingSeconds: current.remainingSeconds - 1, \n      }));\n      state.remainingSeconds === 0 && switchSessions(); //when the remaining seconds reaches zero, run switchSessions function.\n    },\n    state.isTimerRunning ? 1000 : null //run this interval every second while state.isTimerRunning === true. \n  );\n\n  function playPause() { //runs when play or pause is clicked\n    !state.isTimerStarted &&\n    setState((current) => ({ //if the timer hasn't started, set the remaining seconds to the current focus duration setting\n        ...current,\n        remainingSeconds: current.focusDuration,\n      }));\n    setState((current) => ({ //switch boolean state of isTimerRunning\n      ...current,\n      isTimerRunning: !current.isTimerRunning,\n    }));\n    setState((current) => ({ ...current, isTimerStarted: true })); //start timer\n  }\n\n  function switchSessions() { // runs each time the timer hits 0.\n    setState((current) => ({ //switch boolean of isSessionFocus. switches between focus or break session.\n      ...current,\n      isSessionFocus: !current.isSessionFocus,\n    }));\n    if (state.isSessionFocus) // if session was previously focus...\n       {setState((current) => ({\n          ...current,\n          remainingSeconds: current.breakDuration, //...set remaining seconds to break duration setting...\n        }))\n        breakAlarm.play(); //play break alarm sound\n      }\n      else {setState((current) => ({\n          ...current,\n          remainingSeconds: current.focusDuration, //...otherwise set to current focus duration setting\n        }))\n        focusAlarm.play(); //play focus alarm sound\n      };\n  }\n\n  // .............\n  // Handler functions\n  // .............\n\n  const stopHandler = () => { //when stop button is clicked\n    setState((current) => ({ //reset all state values except keep current duration settings and set remaining seconds to focus duration setting.\n      ...initialStates,\n      focusDuration: current.focusDuration,\n      breakDuration: current.breakDuration,\n      remainingSeconds: current.focusDuration,\n    }));\n  };\n\n  const durationHandler = (event) => { //handles clicks on increase or decrease of focus and break durations\n    const target = //wheather the button or the span(icon) is clicked set target to = the button node.\n      event.target.type === \"button\" ? event.target : event.target.parentNode; \n    const targetId = target.dataset.testid; // get the button's \"test-id\" attribute to determine which button is targeted.\n    const targetType = targetId.split(\"-\")[1] + \"Duration\"; // refactor targetId to match the state variable names.\n    let newDuration = 0;\n    switch (targetId) { // decide the new value depending on which button was targeted.\n      case \"decrease-focus\":\n        newDuration = Math.max(300, state.focusDuration - 300);\n        break;\n      case \"increase-focus\":\n        newDuration = Math.min(3600, state.focusDuration + 300);\n        break;\n      case \"decrease-break\":\n        newDuration = Math.max(60, state.breakDuration - 60);\n        break;\n      case \"increase-break\":\n      default:\n        newDuration = Math.min(900, state.breakDuration + 60);\n    }\n    setState((current) => ({ //set the value of the target with the new value defined above.\n      ...current,\n      [targetType]: newDuration,\n    }));\n  };\n\n  // Only Render the session if the timer started\n  const displaySession = state.isTimerStarted && <Session state={state} />;\n\n  // .............\n  // Render\n  // .............\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <FocusDuration state={state} durationHandler={durationHandler} />\n        <BreakDuration state={state} durationHandler={durationHandler} />\n      </div>\n      <StartStop\n        state={state}\n        playPause={playPause}\n        stopHandler={stopHandler}\n      />\n      {displaySession}\n    </div> \n  );\n}\n\nexport default Pomodoro;\n","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header container\">\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <div className=\"container\">\n        <Pomodoro />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}